package main

import "fmt"
/*
[12, 2, 8, 43, 90, |4|, 9, 18, 11, 34, 89]
[|4|, (2), 8, 43, 90, 12, 9, 18, 11, 34, 89]
[2, |4|, 8, 43, 90, 12, 9, 18, 11, 34, 89]
[2]     [8, 43, 90, 12, |9|, 18, 11, 34, 89]
        [|9|, 43, 90, 12, 8, 18, 11, 34, 89]
        [|9|, (8), 90, 12, 43, 18, 11, 34, 89]
        [8, |9|, 90, 12, 43, 18, 11, 34, 89]
        [8]     [90, 12, 43, |18|, 11, 34, 89]
                [|18|, 12, 43, 90, 11, 34, 89]
                [|18|, (12), (11), 90, 43, 34, 89]
                [11, 12, |18|, 90, 43, 34, 89]
                [11, |12|]    [90, 43, |34|, 89]
                [|12|, (11)]  [|34|, 43, 90, 89]
                [11, |12|]    []    [43, |90|, 89]
                [11]  []            [|90|, (43), (89)]
                                    [89, 43, |90|]
                                    [89, |43|]  [] 
                                    [|43|, 89] 
                                    []    [89]

2    4   8   9   11   12  18    34    43   89 90
*/
func main() {
	// arr := []int{34, 2, 1, 45, 23, 12, 62, 13, 6}
	arr := []int{12, 2, 8, 43, 90, 4, 9, 18, 11, 34, 89}
	fmt.Println(arr)
	quickSort(arr)
	fmt.Println(arr)
}

func quickSort(arr []int) {
	// fmt.Println(arr)
	// условие выхода из рекурсии
	if len(arr) <= 1 {
		return
	}
	// fmt.Println("pivot:", arr[len(arr)/2])

	// меняем местами средний элемент с первым
	arr[0], arr[len(arr) / 2] = arr[len(arr) / 2], arr[0]
	
	// индекс среднего элемента
	pivot := 0
	// проходим по массиву и меняем элементы местами так, чтобы те, которые меньше первого, стояли ближе к нему
	for i := 1; i < len(arr); i++ {
		if arr[0] > arr[i] {
			pivot++
			arr[pivot], arr[i] = arr[i], arr[pivot]
		}
	}
	// меняем местами первый элемент с последним из тех, что меньше его
	arr[0], arr[pivot] = arr[pivot], arr[0]
	fmt.Println("left:", arr[:pivot])
	// сортируем элементы слева от среднего элемента
	quickSort(arr[:pivot])
	fmt.Println("right:", arr[pivot+1:])
	// сортируем элементы справа от среднего элемента
	quickSort(arr[pivot+1:])
}
